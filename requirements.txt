docker
docker-compose
localstack
awscli

-- Create Users table (referenced by all other tables)
CREATE TABLE users (
    user_id VARCHAR(36) PRIMARY KEY NOT NULL
);

-- Create Transaction Types table
CREATE TABLE transaction_types (
    user_id VARCHAR(36) NOT NULL,
    type_id VARCHAR(36) PRIMARY KEY NOT NULL,
    type_name VARCHAR(255) NOT NULL,
    type_description VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create Category table
CREATE TABLE category (
    user_id VARCHAR(36) NOT NULL,
    category_id VARCHAR(36) PRIMARY KEY,
    category_name VARCHAR(255) NOT NULL,
    category_description VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create Budget table
CREATE TABLE budget (
    user_id VARCHAR(36) NOT NULL,
    budget_id VARCHAR(36) PRIMARY KEY NOT NULL,
    budget_name VARCHAR(255) NOT NULL,
    budget_description VARCHAR(255),
    budget_target_amount INTEGER NOT NULL,
    budget_current_amount INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create Goals table
CREATE TABLE goals (
    user_id VARCHAR(36) NOT NULL,
    goal_id VARCHAR(36) PRIMARY KEY NOT NULL,
    goal_name VARCHAR(255) NOT NULL,
    goal_description VARCHAR(255),
    goal_target_amount INTEGER NOT NULL,
    goal_current_amount INTEGER DEFAULT 0 NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Create Transactions table
CREATE TABLE transactions (
    user_id VARCHAR(36) NOT NULL,
    transaction_id VARCHAR(36) PRIMARY KEY NOT NULL,
    category_id VARCHAR(36) NOT NULL,
    type_id VARCHAR(36) NOT NULL,
    transaction_name VARCHAR(255) NOT NULL,
    transaction_description VARCHAR(255),
    transaction_amount INTEGER NOT NULL,
    transaction_date VARCHAR(50) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES category(category_id) ON DELETE CASCADE,
    FOREIGN KEY (type_id) REFERENCES transaction_types(type_id) ON DELETE CASCADE
);

-- Create search indexes for all ID fields grouped by table
-- Budget table indexes
CREATE INDEX idx_budget_ids ON budget(user_id, budget_id);
CREATE INDEX idx_budget_user_id ON budget(user_id);

-- Category table indexes
CREATE INDEX idx_category_ids ON category(user_id, category_id);
CREATE INDEX idx_category_user_id ON category(user_id);

-- Goals table indexes
CREATE INDEX idx_goals_ids ON goals(user_id, goal_id);
CREATE INDEX idx_goals_user_id ON goals(user_id);

-- Transactions table indexes
CREATE INDEX idx_transactions_ids ON transactions(user_id, transaction_id, category_id, type_id);
CREATE INDEX idx_transactions_user_id ON transactions(user_id);
CREATE INDEX idx_transactions_category_id ON transactions(category_id);
CREATE INDEX idx_transactions_type_id ON transactions(type_id);
CREATE INDEX idx_transactions_date ON transactions(transaction_date);

-- Transaction Types table indexes
CREATE INDEX idx_transaction_types_ids ON transaction_types(user_id, type_id);
CREATE INDEX idx_transaction_types_user_id ON transaction_types(user_id);

-- Users table index
CREATE INDEX idx_users_user_id ON users(user_id);

from __future__ import with_statement

from logging.config import fileConfig

from sqlalchemy import create_engine
from sqlalchemy import pool

from alembic import context
import os

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = None

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

def get_url():
    _db_url = "mysql+pymysql://%s:%s@%s/%s" % (
        os.getenv("DB_USER", ""),
        os.getenv("DB_PASSWORD", ""),
        os.getenv("DB_HOST", ""),
        os.getenv("DB_NAME", ""),
    )
    return _db_url


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = get_url()
    context.configure(
        url=url, target_metadata=target_metadata, literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = create_engine(get_url(), pool_pre_ping=True)

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
